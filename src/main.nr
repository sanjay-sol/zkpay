use sha256::sha256;
fn main(
    message: [u8; 46],
    msg_hash: [u8; 32],
    signature: [u8; 64],
    pubkey_x: [u8; 32],
    pubkey_y: [u8; 32],
) {
    let computed_hash: [u8; 32] = sha256::sha256(message);
    assert(computed_hash == msg_hash);
    let sig_valid: bool =
        std::ecdsa_secp256k1::verify_signature(pubkey_x, pubkey_y, signature, msg_hash);
    assert(sig_valid == true)
}
#[test]
fn test_valid_signature() {
    let message: [u8; 46] = [
        0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63,
        0x7c, 0x46, 0x65, 0x72, 0x67, 0x75, 0x73, 0x6f, 0x6e, 0x7c, 0x31, 0x36, 0x36, 0x30, 0x30,
        0x30, 0x7c, 0x53, 0x52, 0x4e, 0x39, 0x33, 0x37, 0x35, 0x38, 0x30, 0x32, 0x38, 0x35, 0x35,
        0x7c,
    ];

    let msg_hash: [u8; 32] = [
        0xe3, 0xa6, 0x26, 0x68, 0x19, 0xf3, 0x4d, 0xd1, 0xaf, 0x14, 0x7c, 0x47, 0x91, 0xd4, 0xef,
        0x92, 0x41, 0xd9, 0xe3, 0xf8, 0x07, 0xc6, 0xb3, 0x40, 0xe7, 0x94, 0x42, 0x8d, 0x6b, 0x8e,
        0xba, 0x7a,
    ];

    let signature: [u8; 64] = [
        0x12, 0x8e, 0xcc, 0x34, 0xd9, 0xca, 0x40, 0xa6, 0x56, 0xcd, 0x2b, 0x53, 0x74, 0xe7, 0x37,
        0xda, 0x0c, 0x41, 0x84, 0x8e, 0x17, 0x45, 0x96, 0xbb, 0xd0, 0xec, 0x6d, 0x94, 0xdf, 0xb1,
        0xf2, 0x05, 0x55, 0x3c, 0x7a, 0xe7, 0x5d, 0x26, 0x7c, 0x93, 0xdf, 0xc7, 0x4f, 0xb2, 0x17,
        0x9c, 0x3e, 0x6d, 0x4b, 0x25, 0x27, 0x64, 0x73, 0xee, 0x66, 0x92, 0xa4, 0x4d, 0xab, 0x0e,
        0x85, 0x3b, 0x8d, 0xba,
    ];

    let pubkey_x: [u8; 32] = [
        0xab, 0x8f, 0x04, 0x5d, 0x2f, 0xdc, 0x31, 0x88, 0x0e, 0x6c, 0x7b, 0x54, 0x03, 0x94, 0x2c,
        0x0e, 0xb1, 0x56, 0x2b, 0xa5, 0xd3, 0x1e, 0x3b, 0xb5, 0x1e, 0x7f, 0x68, 0x74, 0xae, 0xd2,
        0x94, 0x90,
    ];

    let pubkey_y: [u8; 32] = [
        0x82, 0x1d, 0x6d, 0xba, 0x2d, 0xa8, 0xc0, 0xaa, 0xd7, 0xef, 0x51, 0x64, 0x65, 0xb8, 0xc2,
        0x8a, 0x72, 0x78, 0x2e, 0x9e, 0xe6, 0x2d, 0x96, 0x72, 0xa9, 0x8e, 0xff, 0xeb, 0x8d, 0x07,
        0xf9, 0x5b,
    ];
    main(message, msg_hash, signature, pubkey_x, pubkey_y);

    // assert(main(msg_hash, signature, pubkey_x, pubkey_y) == true);
}
