use sha256::sha256;
fn main(
    message: [u8; 19],
    msg_hash: [u8; 32],
    signature: [u8; 64],
    pubkey_x: [u8; 32],
    pubkey_y: [u8; 32],
) {
    let computed_hash: [u8; 32] = sha256::sha256(message);
    assert(computed_hash == msg_hash);
    let sig_valid: bool =
        std::ecdsa_secp256k1::verify_signature(pubkey_x, pubkey_y, signature, msg_hash);
    assert(sig_valid == true)
}
#[test]
fn test_valid_signature() {
    let message: [u8; 19] = [
        0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x4e, 0x6f, 0x69, 0x72, 0x20, 0x2b, 0x20, 0x45, 0x43,
        0x44, 0x53, 0x41, 0x21,
    ];

    let msg_hash: [u8; 32] = [
        0xa0, 0x88, 0xa6, 0x01, 0x43, 0xf2, 0x6c, 0x71, 0x52, 0xdc, 0xd5, 0x73, 0x50, 0xd1, 0x90,
        0x20, 0xb8, 0xff, 0x99, 0xce, 0xb6, 0x04, 0xf6, 0x1a, 0xdb, 0xc9, 0x36, 0x42, 0x05, 0x4e,
        0x58, 0xdc,
    ];

    let signature: [u8; 64] = [
        0x9c, 0x3b, 0x37, 0x0b, 0x10, 0xf7, 0xd1, 0x15, 0xc9, 0x0f, 0xd6, 0xd5, 0x3a, 0xcb, 0xf8,
        0x15, 0x9e, 0x67, 0x7d, 0x2c, 0x63, 0x04, 0x98, 0xb7, 0xec, 0xfc, 0x1f, 0x17, 0x8a, 0x02,
        0x82, 0xbb, 0x64, 0xde, 0x9b, 0x3b, 0xc7, 0x9e, 0xf4, 0x3e, 0x72, 0xb9, 0xad, 0x56, 0x0a,
        0x7a, 0x04, 0x85, 0xef, 0xbb, 0xc3, 0xf1, 0x64, 0xd8, 0xfc, 0x0d, 0xdc, 0x10, 0x0e, 0xd2,
        0x9a, 0x34, 0x9b, 0x4e,
    ];

    let pubkey_x: [u8; 32] = [
        0xd0, 0xd8, 0xe0, 0xb0, 0x64, 0x8b, 0x5a, 0x39, 0x79, 0xa4, 0x13, 0xf9, 0xfb, 0xbf, 0xac,
        0x9b, 0x79, 0x84, 0x7f, 0x86, 0x91, 0xb7, 0x2d, 0xe5, 0xb4, 0x24, 0x4b, 0x40, 0x71, 0x9a,
        0x9f, 0x6a,
    ];

    let pubkey_y: [u8; 32] = [
        0xf2, 0xeb, 0x73, 0x52, 0x2f, 0xb0, 0x73, 0xa9, 0x94, 0x51, 0x89, 0x1b, 0x5f, 0xbe, 0x08,
        0xb4, 0x89, 0x5e, 0x26, 0x58, 0xfd, 0x5a, 0xb5, 0x7e, 0xf6, 0xaa, 0x14, 0x43, 0xe4, 0x7e,
        0xc4, 0xe7,
    ];
    main(message, msg_hash, signature, pubkey_x, pubkey_y);

    // assert(main(msg_hash, signature, pubkey_x, pubkey_y) == true);
}
